.\" Copyright (c) 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	From: @(#)err.3	8.1 (Berkeley) 6/9/93
.\" $FreeBSD$
.\"
.TH "ERR" "3" "March 29, 2012" "GNO" "Library Functions Manual"
.SH "NAME"
\fBerr\fR,
\fBverr\fR,
\fBerrc\fR,
\fBverrc\fR,
\fBerrx\fR,
\fBverrx\fR,
\fBwarn\fR,
\fBvwarn\fR,
\fBwarnc\fR,
\fBvwarnc\fR,
\fBwarnx\fR,
\fBvwarnx\fR,
\fBerr_set_exit\fR,
\fBerr_set_file\fR
\- formatted error messages
.SH "LIBRARY"
Standard C Library (libc, \-lc)
.SH "SYNOPSIS"
\fB#include <err.h>\fR
.sp
\fIvoid\fR
\fBerr\fR(\fIint\ eval\fR, \fIconst\ char\ *fmt\fR, \fI...\fR);
.PP
\fIvoid\fR
\fBerr_set_exit\fR(\fIvoid\ (*exitf)(int)\fR);
.PP
\fIvoid\fR
\fBerr_set_file\fR(\fIvoid\ *vfp\fR);
.PP
\fIvoid\fR
\fBerrc\fR(\fIint\ eval\fR, \fIint\ code\fR, \fIconst\ char\ *fmt\fR, \fI...\fR);
.PP
\fIvoid\fR
\fBerrx\fR(\fIint\ eval\fR, \fIconst\ char\ *fmt\fR, \fI...\fR);
.PP
\fIvoid\fR
\fBwarn\fR(\fIconst\ char\ *fmt\fR, \fI...\fR);
.PP
\fIvoid\fR
\fBwarnc\fR(\fIint\ code\fR, \fIconst\ char\ *fmt\fR, \fI...\fR);
.PP
\fIvoid\fR
\fBwarnx\fR(\fIconst\ char\ *fmt\fR, \fI...\fR);
.PP
\fB#include <stdarg.h>\fR
.sp
\fIvoid\fR
\fBverr\fR(\fIint\ eval\fR, \fIconst\ char\ *fmt\fR, \fIva_list\ args\fR);
.PP
\fIvoid\fR
\fBverrc\fR(\fIint\ eval\fR, \fIint\ code\fR, \fIconst\ char\ *fmt\fR, \fIva_list\ args\fR);
.PP
\fIvoid\fR
\fBverrx\fR(\fIint\ eval\fR, \fIconst\ char\ *fmt\fR, \fIva_list\ args\fR);
.PP
\fIvoid\fR
\fBvwarn\fR(\fIconst\ char\ *fmt\fR, \fIva_list\ args\fR);
.PP
\fIvoid\fR
\fBvwarnc\fR(\fIint\ code\fR, \fIconst\ char\ *fmt\fR, \fIva_list\ args\fR);
.PP
\fIvoid\fR
\fBvwarnx\fR(\fIconst\ char\ *fmt\fR, \fIva_list\ args\fR);
.SH "DESCRIPTION"
The
\fBerr\fR()
and
\fBwarn\fR()
family of functions display a formatted error message on the standard
error output, or on another file specified using the
\fBerr_set_file\fR()
function.
In all cases, the last component of the program name, a colon character,
and a space are output.
If the
\fIfmt\fR
argument is not NULL, the
printf(3)-like formatted error message is output.
The output is terminated by a newline character.
.PP
The
\fBerr\fR(),
\fBerrc\fR(),
\fBverr\fR(),
\fBverrc\fR(),
\fBwarn\fR(),
\fBwarnc\fR(),
\fBvwarn\fR(),
and
\fBvwarnc\fR()
functions append an error message obtained from
strerror(3)
based on a supplied error code value or the global variable
\fIerrno\fR,
preceded by another colon and space unless the
\fIfmt\fR
argument is
\fRNULL\fR.
.PP
In the case of the
\fBerrc\fR(),
\fBverrc\fR(),
\fBwarnc\fR(),
and
\fBvwarnc\fR()
functions,
the
\fIcode\fR
argument is used to look up the error message.
.PP
The
\fBerr\fR(),
\fBverr\fR(),
\fBwarn\fR(),
and
\fBvwarn\fR()
functions use the global variable
\fIerrno\fR
to look up the error message.
.PP
The
\fBerrx\fR()
and
\fBwarnx\fR()
functions do not append an error message.
.PP
The
\fBerr\fR(),
\fBverr\fR(),
\fBerrc\fR(),
\fBverrc\fR(),
\fBerrx\fR(),
and
\fBverrx\fR()
functions do not return, but exit with the value of the argument
\fIeval\fR.
It is recommended that the standard values defined in
sysexits(3)
be used for the value of
\fIeval\fR.
The
\fBerr_set_exit\fR()
function can be used to specify a function which is called before
exit(3)
to perform any necessary cleanup; passing a null function pointer for
\fIexitf\fR
resets the hook to do nothing.
The
\fBerr_set_file\fR()
function sets the output stream used by the other functions.
Its
\fIvfp\fR
argument must be either a pointer to an open stream
(possibly already converted to void *)
or a null pointer
(in which case the output stream is set to standard error).
.SH "EXAMPLES"
Display the current errno information string and exit:
.nf
.sp
.RS 6n
if ((p = malloc(size)) == NULL)
	err(EX_OSERR, NULL);
if ((fd = open(file_name, O_RDONLY, 0)) == -1)
	err(EX_NOINPUT, "%s", file_name);
.RE
.fi
.PP
Display an error message and exit:
.nf
.sp
.RS 6n
if (tm.tm_hour < START_TIME)
	errx(EX_DATAERR, "too early, wait until %s",
	    start_time_string);
.RE
.fi
.PP
Warn of an error:
.nf
.sp
.RS 6n
if ((fd = open(raw_device, O_RDONLY, 0)) == -1)
	warnx("%s: %s: trying the block device",
	    raw_device, strerror(errno));
if ((fd = open(block_device, O_RDONLY, 0)) == -1)
	err(EX_OSFILE, "%s", block_device);
.RE
.fi
.PP
Warn of an error without using the global variable
\fIerrno\fR:
.nf
.sp
.RS 6n
error = my_function();	/* returns a value from <errno.h> */
if (error != 0)
	warnc(error, "my_function");
.RE
.fi
.SH "SEE ALSO"
exit(3),
fmtmsg(3),
printf(3),
strerror(3),
sysexits(3)
.SH "STANDARDS"
The
\fBerr\fR()
and
\fBwarn\fR()
families of functions are
BSD
extensions.
As such they should not be used in truly portable code.
Use
\fBstrerror\fR()
or similar functions instead.
.SH "HISTORY"
The
\fBerr\fR()
and
\fBwarn\fR()
functions first appeared in
4.4BSD.
The
\fBerr_set_exit\fR()
and
\fBerr_set_file\fR()
functions first appeared in
FreeBSD\ 2.1.
The
\fBerrc\fR()
and
\fBwarnc\fR()
functions first appeared in
FreeBSD\ 3.0.
